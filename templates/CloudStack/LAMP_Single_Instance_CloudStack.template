{
  "CSTemplateFormatVersion" : "1",
  
  "Description" : "CloudStack StackMate Sample Template LAMP_Single_Instance: Create a LAMP stack using a single EC2 instance and a local MySQL database for storage. This template demonstrates using the CloudWorks bootstrap scripts to install the packages and files necessary to deploy the Apache web server, PHP and MySQL at instance launch time",
  
  "Parameters" : {
    "zoneid":{
         "Description":"ID of the zone to create stack",
         "Type":"String"
      },
      "templateid":{
         "Description":"ID of the VM template ",
         "Type":"String"
      },
      "serviceofferingid":{
         "Description":"ID of the serviceoffering ",
         "Type":"String"
      },
    "KeyName" : {
      "Description" : "Name of an existing CloudStack KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },    

    "DBName": {
      "Default": "MyDatabase",
      "Description" : "MySQL database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername": {
      "NoEcho": "true",
      "Description" : "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword": {
      "NoEcho": "true",
      "Description" : "Password for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBRootPassword": {
      "NoEcho": "true",
      "Description" : "Root password for MySQL",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },
    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    } 
  },
  
  "Resources" : {     
      
    "WebServer": {  
      "Type": "CloudStack::VirtualMachine",
      "Properties": {
        "templateid" : {"Ref":"templateid"},
        "serviceofferingid"   : { "Ref" : "serviceofferingid" },
        "zoneid" : {"Ref" : "zoneid"},
        "securitygroupids" : {"Ref" : "WebServerSecurityGroup"},
        "keypair"        : { "Ref" : "KeyName" },
        "userdata"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash -v\n",
          "yum update -y aws-cfn-bootstrap\n",

          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",

          "# Install LAMP packages\n",
          "/opt/aws/bin/cfn-init -s ", { "Ref" : "CloudStack::StackId" }, " -r WebServer ",
          "    --region ", { "Ref" : "zoneid" }, " || error_exit 'Failed to run cfn-init'\n",

          "# Setup MySQL, create a user and a database\n",
          "mysqladmin -u root password '", { "Ref" : "DBRootPassword" }, "' || error_exit 'Failed to initialize root password'\n",
          "mysql -u root --password='", { "Ref" : "DBRootPassword" }, "' < /tmp/setup.mysql || error_exit 'Failed to initialize database'\n",

          "# Configure the PHP application - in this case, fixup the page with the right references to the database\n",
          "sed -i \"s/REPLACE_WITH_DATABASE/localhost/g\" /var/www/html/index.php\n",
          "sed -i \"s/REPLACE_WITH_DBUSER/", { "Ref" : "DBUsername" }, "/g\" /var/www/html/index.php\n",
          "sed -i \"s/REPLACE_WITH_DBPASSWORD/", { "Ref" : "DBPassword" }, "/g\" /var/www/html/index.php\n",

          "# All is well so signal success\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"LAMP Stack setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ]]}}        
      }
    },

    "WaitHandle" : {
      "Type" : "StackMate::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "StackMate::WaitCondition",
      "DependsOn" : "WebServer",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "300"
      }
    },
    
        "WebServerSecurityGroup" : {
          "Type" : "CloudStack::SecurityGroup",
          "Properties" : {
            "name" : "Enable HTTP access via port 80"
          }      
        },          

      "SecurityGroupIngress1":{
         "Type":"CloudStack::SecurityGroupIngress",
         "Properties":{
            "securitygroupid":{"Ref":"WebServerSecurityGroup"},
            "protocol":"tcp",
            "startport":"80",
            "endport":"80",
            "cidrlist":"0.0.0.0/0"
         }
      },

      "SecurityGroupIngress2":{
         "Type":"CloudStack::SecurityGroupIngress",
         "Properties":{
            "securitygroupid":{"Ref":"WebServerSecurityGroup"},
            "protocol":"tcp",
            "startport":"22",
            "endport":"22",
            "cidrlist":{"Ref" :"SSHLocation"}
         }
      }
      },   
      "Outputs" : {
    "WebsiteURL" : {
      "Value" : { "Fn::Join" : ["", ["http://", { "Fn::GetAtt" : [ "WebServer", "PrivateIp" ]}]] },
      "Description" : "URL for newly created LAMP stack"
    }
  }
}
