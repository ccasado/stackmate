require 'rspec'
require '../lib/stackmate/stack.rb'

describe "stack functions test" do
  before do
    @resolved = {"DBName"=>"cloud", "DBUserName"=>"cloud", "SSHLocation"=>"75.75.75.0/24", "DBUsername"=>"cloud", "DBPassword"=>"cloud", "DBRootPassword"=>"cloud", "KeyName"=>"stackTest", "AWS::Region"=>"us-east-1", "AWS::StackName"=>"CSSTACK", "AWS::StackId"=>"CSSTACK"}
    @param_names = {"KeyName"=>{"Description"=>"Name of an existing EC2 KeyPair to enable SSH access to the instances", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"64", "AllowedPattern"=>"[-_ a-zA-Z0-9]*", "ConstraintDescription"=>"can contain only alphanumeric characters, spaces, dashes and underscores."}, "DBName"=>{"Default"=>"MyDatabase", "Description"=>"MySQL database name", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"64", "AllowedPattern"=>"[a-zA-Z][a-zA-Z0-9]*", "ConstraintDescription"=>"must begin with a letter and contain only alphanumeric characters."}, "DBUsername"=>{"NoEcho"=>"true", "Description"=>"Username for MySQL database access", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"16", "AllowedPattern"=>"[a-zA-Z][a-zA-Z0-9]*", "ConstraintDescription"=>"must begin with a letter and contain only alphanumeric characters."}, "DBPassword"=>{"NoEcho"=>"true", "Description"=>"Password for MySQL database access", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"41", "AllowedPattern"=>"[a-zA-Z0-9]*", "ConstraintDescription"=>"must contain only alphanumeric characters."}, "DBRootPassword"=>{"NoEcho"=>"true", "Description"=>"Root password for MySQL", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"41", "AllowedPattern"=>"[a-zA-Z0-9]*", "ConstraintDescription"=>"must contain only alphanumeric characters."}, "InstanceType"=>{"Description"=>"WebServer EC2 instance type", "Type"=>"String", "Default"=>"m1.small", "AllowedValues"=>["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"], "ConstraintDescription"=>"must be a valid EC2 instance type."}, "SSHLocation"=>{"Description"=>" The IP address range that can be used to SSH to the EC2 instances", "Type"=>"String", "MinLength"=>"9", "MaxLength"=>"18", "Default"=>"0.0.0.0/0", "AllowedPattern"=>"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "ConstraintDescription"=>"must be a valid IP CIDR range of the form x.x.x.x/x."}}

    @templ = {"AWSTemplateFormatVersion"=>"2010-09-09", "Description"=>"AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack using a single EC2 instance and a local MySQL database for storage. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server, PHP and MySQL at instance launch time. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.", "Parameters"=>{"KeyName"=>{"Description"=>"Name of an existing EC2 KeyPair to enable SSH access to the instances", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"64", "AllowedPattern"=>"[-_ a-zA-Z0-9]*", "ConstraintDescription"=>"can contain only alphanumeric characters, spaces, dashes and underscores."}, "DBName"=>{"Default"=>"MyDatabase", "Description"=>"MySQL database name", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"64", "AllowedPattern"=>"[a-zA-Z][a-zA-Z0-9]*", "ConstraintDescription"=>"must begin with a letter and contain only alphanumeric characters."}, "DBUsername"=>{"NoEcho"=>"true", "Description"=>"Username for MySQL database access", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"16", "AllowedPattern"=>"[a-zA-Z][a-zA-Z0-9]*", "ConstraintDescription"=>"must begin with a letter and contain only alphanumeric characters."}, "DBPassword"=>{"NoEcho"=>"true", "Description"=>"Password for MySQL database access", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"41", "AllowedPattern"=>"[a-zA-Z0-9]*", "ConstraintDescription"=>"must contain only alphanumeric characters."}, "DBRootPassword"=>{"NoEcho"=>"true", "Description"=>"Root password for MySQL", "Type"=>"String", "MinLength"=>"1", "MaxLength"=>"41", "AllowedPattern"=>"[a-zA-Z0-9]*", "ConstraintDescription"=>"must contain only alphanumeric characters."}, "InstanceType"=>{"Description"=>"WebServer EC2 instance type", "Type"=>"String", "Default"=>"m1.small", "AllowedValues"=>["t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.medium", "c1.xlarge", "cc1.4xlarge", "cc2.8xlarge", "cg1.4xlarge"], "ConstraintDescription"=>"must be a valid EC2 instance type."}, "SSHLocation"=>{"Description"=>" The IP address range that can be used to SSH to the EC2 instances", "Type"=>"String", "MinLength"=>"9", "MaxLength"=>"18", "Default"=>"0.0.0.0/0", "AllowedPattern"=>"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "ConstraintDescription"=>"must be a valid IP CIDR range of the form x.x.x.x/x."}}, "Mappings"=>{"AWSInstanceType2Arch"=>{"t1.micro"=>{"Arch"=>"64"}, "m1.small"=>{"Arch"=>"64"}, "m1.medium"=>{"Arch"=>"64"}, "m1.large"=>{"Arch"=>"64"}, "m1.xlarge"=>{"Arch"=>"64"}, "m2.xlarge"=>{"Arch"=>"64"}, "m2.2xlarge"=>{"Arch"=>"64"}, "m2.4xlarge"=>{"Arch"=>"64"}, "m3.xlarge"=>{"Arch"=>"64"}, "m3.2xlarge"=>{"Arch"=>"64"}, "c1.medium"=>{"Arch"=>"64"}, "c1.xlarge"=>{"Arch"=>"64"}, "cc1.4xlarge"=>{"Arch"=>"64HVM"}, "cc2.8xlarge"=>{"Arch"=>"64HVM"}, "cg1.4xlarge"=>{"Arch"=>"64HVM"}}, "AWSRegionArch2AMI"=>{"us-east-1"=>{"32"=>"ami-31814f58", "64"=>"ami-1b814f72", "64HVM"=>"ami-0da96764"}, "us-west-2"=>{"32"=>"ami-38fe7308", "64"=>"ami-30fe7300", "64HVM"=>"NOT_YET_SUPPORTED"}, "us-west-1"=>{"32"=>"ami-11d68a54", "64"=>"ami-1bd68a5e", "64HVM"=>"NOT_YET_SUPPORTED"}, "eu-west-1"=>{"32"=>"ami-973b06e3", "64"=>"ami-953b06e1", "64HVM"=>"NOT_YET_SUPPORTED"}, "ap-southeast-1"=>{"32"=>"ami-b4b0cae6", "64"=>"ami-beb0caec", "64HVM"=>"NOT_YET_SUPPORTED"}, "ap-southeast-2"=>{"32"=>"ami-b3990e89", "64"=>"ami-bd990e87", "64HVM"=>"NOT_YET_SUPPORTED"}, "ap-northeast-1"=>{"32"=>"ami-0644f007", "64"=>"ami-0a44f00b", "64HVM"=>"NOT_YET_SUPPORTED"}, "sa-east-1"=>{"32"=>"ami-3e3be423", "64"=>"ami-3c3be421", "64HVM"=>"NOT_YET_SUPPORTED"}}}, "Resources"=>{"WebServer"=>{"Type"=>"AWS::EC2::Instance", "Metadata"=>{"Comment1"=>"Configure the bootstrap helpers to install the Apache Web Server and PHP", "Comment2"=>"The website content is downloaded from the CloudFormationPHPSample.zip file", "AWS::CloudFormation::Init"=>{"config"=>{"packages"=>{"yum"=>{"mysql"=>[], "mysql-server"=>[], "mysql-libs"=>[], "httpd"=>[], "php"=>[], "php-mysql"=>[]}}, "sources"=>{"/var/www/html"=>"https://s3.amazonaws.com/cloudformation-examples/CloudFormationPHPSample.zip"}, "files"=>{"/tmp/setup.mysql"=>{"content"=>{"Fn::Join"=>["", ["CREATE DATABASE ", {"Ref"=>"DBName"}, ";\n", "GRANT ALL ON ", {"Ref"=>"DBName"}, ".* TO '", {"Ref"=>"DBUsername"}, "'@localhost IDENTIFIED BY '", {"Ref"=>"DBPassword"}, "';\n"]]}, "mode"=>"000644", "owner"=>"root", "group"=>"root"}}, "services"=>{"sysvinit"=>{"mysqld"=>{"enabled"=>"true", "ensureRunning"=>"true"}, "httpd"=>{"enabled"=>"true", "ensureRunning"=>"true"}}}}}}, "Properties"=>{"ImageId"=>{"Fn::FindInMap"=>["AWSRegionArch2AMI", {"Ref"=>"AWS::Region"}, {"Fn::FindInMap"=>["AWSInstanceType2Arch", {"Ref"=>"InstanceType"}, "Arch"]}]}, "InstanceType"=>{"Ref"=>"InstanceType"}, "SecurityGroups"=>[{"Ref"=>"WebServerSecurityGroup"}], "KeyName"=>{"Ref"=>"KeyName"}, "UserData"=>{"Fn::Base64"=>{"Fn::Join"=>["", ["#!/bin/bash -v\n", "yum update -y aws-cfn-bootstrap\n", "# Helper function\n", "function error_exit\n", "{\n", "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", {"Ref"=>"WaitHandle"}, "'\n", "  exit 1\n", "}\n", "# Install LAMP packages\n", "/opt/aws/bin/cfn-init -s ", {"Ref"=>"AWS::StackId"}, " -r WebServer ", "    --region ", {"Ref"=>"AWS::Region"}, " || error_exit 'Failed to run cfn-init'\n", "# Setup MySQL, create a user and a database\n", "mysqladmin -u root password '", {"Ref"=>"DBRootPassword"}, "' || error_exit 'Failed to initialize root password'\n", "mysql -u root --password='", {"Ref"=>"DBRootPassword"}, "' < /tmp/setup.mysql || error_exit 'Failed to initialize database'\n", "# Configure the PHP application - in this case, fixup the page with the right references to the database\n", "sed -i \"s/REPLACE_WITH_DATABASE/localhost/g\" /var/www/html/index.php\n", "sed -i \"s/REPLACE_WITH_DBUSER/", {"Ref"=>"DBUsername"}, "/g\" /var/www/html/index.php\n", "sed -i \"s/REPLACE_WITH_DBPASSWORD/", {"Ref"=>"DBPassword"}, "/g\" /var/www/html/index.php\n", "# All is well so signal success\n", "/opt/aws/bin/cfn-signal -e 0 -r \"LAMP Stack setup complete\" '", {"Ref"=>"WaitHandle"}, "'\n"]]}}}}, "DbServer"=>{"Type"=>"AWS::EC2::Instance", "Metadata"=>{"Comment1"=>"Configure the bootstrap helpers to install the Apache Web Server and PHP", "Comment2"=>"The website content is downloaded from the CloudFormationPHPSample.zip file", "AWS::CloudFormation::Init"=>{"config"=>{"packages"=>{"yum"=>{"mysql"=>[], "mysql-server"=>[], "mysql-libs"=>[], "httpd"=>[], "php"=>[], "php-mysql"=>[]}}, "sources"=>{"/var/www/html"=>"https://s3.amazonaws.com/cloudformation-examples/CloudFormationPHPSample.zip"}, "files"=>{"/tmp/setup.mysql"=>{"content"=>{"Fn::Join"=>["", ["CREATE DATABASE ", {"Ref"=>"DBName"}, ";\n", "GRANT ALL ON ", {"Ref"=>"DBName"}, ".* TO '", {"Ref"=>"DBUsername"}, "'@localhost IDENTIFIED BY '", {"Ref"=>"DBPassword"}, "';\n"]]}, "mode"=>"000644", "owner"=>"root", "group"=>"root"}}, "services"=>{"sysvinit"=>{"mysqld"=>{"enabled"=>"true", "ensureRunning"=>"true"}, "httpd"=>{"enabled"=>"true", "ensureRunning"=>"true"}}}}}}, "Properties"=>{"ImageId"=>{"Fn::FindInMap"=>["AWSRegionArch2AMI", {"Ref"=>"AWS::Region"}, {"Fn::FindInMap"=>["AWSInstanceType2Arch", {"Ref"=>"InstanceType"}, "Arch"]}]}, "InstanceType"=>{"Ref"=>"InstanceType"}, "SecurityGroups"=>[{"Ref"=>"WebServerSecurityGroup"}], "KeyName"=>{"Ref"=>"KeyName"}, "UserData"=>{"Fn::Base64"=>{"Fn::Join"=>["", ["#!/bin/bash -v\n", "yum update -y aws-cfn-bootstrap\n", "# Helper function\n", "function error_exit\n", "{\n", "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", {"Ref"=>"WaitHandle"}, "'\n", "  exit 1\n", "}\n", "# Install LAMP packages\n", "/opt/aws/bin/cfn-init -s ", {"Ref"=>"AWS::StackId"}, " -r WebServer ", "    --region ", {"Ref"=>"AWS::Region"}, " || error_exit 'Failed to run cfn-init'\n", "# Setup MySQL, create a user and a database\n", "mysqladmin -u root password '", {"Ref"=>"DBRootPassword"}, "' || error_exit 'Failed to initialize root password'\n", "mysql -u root --password='", {"Ref"=>"DBRootPassword"}, "' < /tmp/setup.mysql || error_exit 'Failed to initialize database'\n", "# Configure the PHP application - in this case, fixup the page with the right references to the database\n", "sed -i \"s/REPLACE_WITH_DATABASE/localhost/g\" /var/www/html/index.php\n", "sed -i \"s/REPLACE_WITH_DBUSER/", {"Ref"=>"DBUsername"}, "/g\" /var/www/html/index.php\n", "sed -i \"s/REPLACE_WITH_DBPASSWORD/", {"Ref"=>"DBPassword"}, "/g\" /var/www/html/index.php\n", "# All is well so signal success\n", "/opt/aws/bin/cfn-signal -e 0 -r \"LAMP Stack setup complete\" '", {"Ref"=>"WaitHandle"}, "'\n"]]}}}}, "WaitHandle"=>{"Type"=>"AWS::CloudFormation::WaitConditionHandle"}, "WaitCondition"=>{"Type"=>"AWS::CloudFormation::WaitCondition", "DependsOn"=>"WebServer", "Properties"=>{"Handle"=>{"Ref"=>"WaitHandle"}, "Timeout"=>"300"}}, "WebServerSecurityGroup"=>{"Type"=>"AWS::EC2::SecurityGroup", "Properties"=>{"GroupDescription"=>"Enable HTTP access via port 80", "SecurityGroupIngress"=>[{"IpProtocol"=>"tcp", "FromPort"=>"80", "ToPort"=>"80", "CidrIp"=>"0.0.0.0/0"}, {"IpProtocol"=>"tcp", "FromPort"=>"22", "ToPort"=>"22", "CidrIp"=>{"Ref"=>"SSHLocation"}}]}}}, "Outputs"=>{"WebsiteURL"=>{"Value"=>{"Fn::Join"=>["", ["http://", {"Fn::GetAtt"=>["WebServer", "PublicDnsName"]}]]}, "Description"=>"URL for newly created LAMP stack"}}, "StackName"=>"CSSTACK"}
    @stackstr = "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \n  \"Description\" : \"AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack using a single EC2 instance and a local MySQL database for storage. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server, PHP and MySQL at instance launch time. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n  \n  \"Parameters\" : {\n      \n    \"KeyName\" : {\n      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[-_ a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"can contain only alphanumeric characters, spaces, dashes and underscores.\"\n    },    \n\n    \"DBName\": {\n      \"Default\": \"MyDatabase\",\n      \"Description\" : \"MySQL database name\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBUsername\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Username for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"16\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Password for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"DBRootPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Root password for MySQL\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"InstanceType\" : {\n      \"Description\" : \"WebServer EC2 instance type\",\n      \"Type\" : \"String\",\n      \"Default\" : \"m1.small\",\n      \"AllowedValues\" : [ \"t1.micro\",\"m1.small\",\"m1.medium\",\"m1.large\",\"m1.xlarge\",\"m2.xlarge\",\"m2.2xlarge\",\"m2.4xlarge\",\"m3.xlarge\",\"m3.2xlarge\",\"c1.medium\",\"c1.xlarge\",\"cc1.4xlarge\",\"cc2.8xlarge\",\"cg1.4xlarge\"],\n      \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\n    },\n    \"SSHLocation\" : {\n      \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"Default\": \"0.0.0.0/0\",\n      \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n      \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n    } \n  },\n  \n  \"Mappings\" : {\n    \"AWSInstanceType2Arch\" : {\n      \"t1.micro\"    : { \"Arch\" : \"64\" },\n      \"m1.small\"    : { \"Arch\" : \"64\" },\n      \"m1.medium\"   : { \"Arch\" : \"64\" },\n      \"m1.large\"    : { \"Arch\" : \"64\" },\n      \"m1.xlarge\"   : { \"Arch\" : \"64\" },\n      \"m2.xlarge\"   : { \"Arch\" : \"64\" },\n      \"m2.2xlarge\"  : { \"Arch\" : \"64\" },\n      \"m2.4xlarge\"  : { \"Arch\" : \"64\" },\n      \"m3.xlarge\"   : { \"Arch\" : \"64\" },\n      \"m3.2xlarge\"  : { \"Arch\" : \"64\" },\n      \"c1.medium\"   : { \"Arch\" : \"64\" },\n      \"c1.xlarge\"   : { \"Arch\" : \"64\" },\n      \"cc1.4xlarge\" : { \"Arch\" : \"64HVM\" },\n      \"cc2.8xlarge\" : { \"Arch\" : \"64HVM\" },\n      \"cg1.4xlarge\" : { \"Arch\" : \"64HVM\" }\n    },\n\n    \"AWSRegionArch2AMI\" : {\n      \"us-east-1\"      : { \"32\" : \"ami-31814f58\", \"64\" : \"ami-1b814f72\", \"64HVM\" : \"ami-0da96764\" },\n      \"us-west-2\"      : { \"32\" : \"ami-38fe7308\", \"64\" : \"ami-30fe7300\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"us-west-1\"      : { \"32\" : \"ami-11d68a54\", \"64\" : \"ami-1bd68a5e\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"eu-west-1\"      : { \"32\" : \"ami-973b06e3\", \"64\" : \"ami-953b06e1\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"ap-southeast-1\" : { \"32\" : \"ami-b4b0cae6\", \"64\" : \"ami-beb0caec\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"ap-southeast-2\" : { \"32\" : \"ami-b3990e89\", \"64\" : \"ami-bd990e87\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"ap-northeast-1\" : { \"32\" : \"ami-0644f007\", \"64\" : \"ami-0a44f00b\", \"64HVM\" : \"NOT_YET_SUPPORTED\" },\n      \"sa-east-1\"      : { \"32\" : \"ami-3e3be423\", \"64\" : \"ami-3c3be421\", \"64HVM\" : \"NOT_YET_SUPPORTED\" }\n    }\n  },\n    \n  \"Resources\" : {     \n      \n    \"WebServer\": {  \n      \"Type\": \"AWS::EC2::Instance\",\n      \"Metadata\" : {\n        \"Comment1\" : \"Configure the bootstrap helpers to install the Apache Web Server and PHP\",\n        \"Comment2\" : \"The website content is downloaded from the CloudFormationPHPSample.zip file\",\n\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"packages\" : {\n              \"yum\" : {\n                \"mysql\"        : [],\n                \"mysql-server\" : [],\n                \"mysql-libs\"   : [],\n                \"httpd\"        : [],\n                \"php\"          : [],\n                \"php-mysql\"    : []\n              }\n            },\n\n            \"sources\" : {\n              \"/var/www/html\" : \"https://s3.amazonaws.com/cloudformation-examples/CloudFormationPHPSample.zip\"\n            },\n\n            \"files\" : {\n              \"/tmp/setup.mysql\" : {\n                \"content\" : { \"Fn::Join\" : [\"\", [\n                  \"CREATE DATABASE \", { \"Ref\" : \"DBName\" }, \";\\n\",\n                  \"GRANT ALL ON \", { \"Ref\" : \"DBName\" }, \".* TO '\", { \"Ref\" : \"DBUsername\" }, \"'@localhost IDENTIFIED BY '\", { \"Ref\" : \"DBPassword\" }, \"';\\n\"\n                  ]]},\n                \"mode\"  : \"000644\",\n                \"owner\" : \"root\",\n                \"group\" : \"root\"\n              }\n            },\n\n            \"services\" : {\n              \"sysvinit\" : {  \n                \"mysqld\" : {\n                  \"enabled\"       : \"true\",\n                  \"ensureRunning\" : \"true\"                \n                },\n                \"httpd\" : {\n                  \"enabled\"       : \"true\",\n                  \"ensureRunning\" : \"true\"                \n                }\n              }\n            }\n          }\n        }\n      },\n      \"Properties\": {\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroups\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ],\n        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n        \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [\n          \"#!/bin/bash -v\\n\",\n          \"yum update -y aws-cfn-bootstrap\\n\",\n\n          \"# Helper function\\n\",\n          \"function error_exit\\n\",\n          \"{\\n\",\n          \"  /opt/aws/bin/cfn-signal -e 1 -r \\\"$1\\\" '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\",\n          \"  exit 1\\n\",\n          \"}\\n\",\n\n          \"# Install LAMP packages\\n\",\n          \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServer \",\n          \"    --region \", { \"Ref\" : \"AWS::Region\" }, \" || error_exit 'Failed to run cfn-init'\\n\",\n\n          \"# Setup MySQL, create a user and a database\\n\",\n          \"mysqladmin -u root password '\", { \"Ref\" : \"DBRootPassword\" }, \"' || error_exit 'Failed to initialize root password'\\n\",\n          \"mysql -u root --password='\", { \"Ref\" : \"DBRootPassword\" }, \"' < /tmp/setup.mysql || error_exit 'Failed to initialize database'\\n\",\n\n          \"# Configure the PHP application - in this case, fixup the page with the right references to the database\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DATABASE/localhost/g\\\" /var/www/html/index.php\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DBUSER/\", { \"Ref\" : \"DBUsername\" }, \"/g\\\" /var/www/html/index.php\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DBPASSWORD/\", { \"Ref\" : \"DBPassword\" }, \"/g\\\" /var/www/html/index.php\\n\",\n\n          \"# All is well so signal success\\n\",\n          \"/opt/aws/bin/cfn-signal -e 0 -r \\\"LAMP Stack setup complete\\\" '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\"\n        ]]}}        \n      }\n    },\n\n    \"DbServer\": {  \n      \"Type\": \"AWS::EC2::Instance\",\n      \"Metadata\" : {\n        \"Comment1\" : \"Configure the bootstrap helpers to install the Apache Web Server and PHP\",\n        \"Comment2\" : \"The website content is downloaded from the CloudFormationPHPSample.zip file\",\n\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"packages\" : {\n              \"yum\" : {\n                \"mysql\"        : [],\n                \"mysql-server\" : [],\n                \"mysql-libs\"   : [],\n                \"httpd\"        : [],\n                \"php\"          : [],\n                \"php-mysql\"    : []\n              }\n            },\n\n            \"sources\" : {\n              \"/var/www/html\" : \"https://s3.amazonaws.com/cloudformation-examples/CloudFormationPHPSample.zip\"\n            },\n\n            \"files\" : {\n              \"/tmp/setup.mysql\" : {\n                \"content\" : { \"Fn::Join\" : [\"\", [\n                  \"CREATE DATABASE \", { \"Ref\" : \"DBName\" }, \";\\n\",\n                  \"GRANT ALL ON \", { \"Ref\" : \"DBName\" }, \".* TO '\", { \"Ref\" : \"DBUsername\" }, \"'@localhost IDENTIFIED BY '\", { \"Ref\" : \"DBPassword\" }, \"';\\n\"\n                  ]]},\n                \"mode\"  : \"000644\",\n                \"owner\" : \"root\",\n                \"group\" : \"root\"\n              }\n            },\n\n            \"services\" : {\n              \"sysvinit\" : {  \n                \"mysqld\" : {\n                  \"enabled\"       : \"true\",\n                  \"ensureRunning\" : \"true\"                \n                },\n                \"httpd\" : {\n                  \"enabled\"       : \"true\",\n                  \"ensureRunning\" : \"true\"                \n                }\n              }\n            }\n          }\n        }\n      },\n      \"Properties\": {\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroups\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ],\n        \"KeyName\"        : { \"Ref\" : \"KeyName\" },\n        \"UserData\"       : { \"Fn::Base64\" : { \"Fn::Join\" : [\"\", [\n          \"#!/bin/bash -v\\n\",\n          \"yum update -y aws-cfn-bootstrap\\n\",\n\n          \"# Helper function\\n\",\n          \"function error_exit\\n\",\n          \"{\\n\",\n          \"  /opt/aws/bin/cfn-signal -e 1 -r \\\"$1\\\" '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\",\n          \"  exit 1\\n\",\n          \"}\\n\",\n\n          \"# Install LAMP packages\\n\",\n          \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r WebServer \",\n          \"    --region \", { \"Ref\" : \"AWS::Region\" }, \" || error_exit 'Failed to run cfn-init'\\n\",\n\n          \"# Setup MySQL, create a user and a database\\n\",\n          \"mysqladmin -u root password '\", { \"Ref\" : \"DBRootPassword\" }, \"' || error_exit 'Failed to initialize root password'\\n\",\n          \"mysql -u root --password='\", { \"Ref\" : \"DBRootPassword\" }, \"' < /tmp/setup.mysql || error_exit 'Failed to initialize database'\\n\",\n\n          \"# Configure the PHP application - in this case, fixup the page with the right references to the database\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DATABASE/localhost/g\\\" /var/www/html/index.php\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DBUSER/\", { \"Ref\" : \"DBUsername\" }, \"/g\\\" /var/www/html/index.php\\n\",\n          \"sed -i \\\"s/REPLACE_WITH_DBPASSWORD/\", { \"Ref\" : \"DBPassword\" }, \"/g\\\" /var/www/html/index.php\\n\",\n\n          \"# All is well so signal success\\n\",\n          \"/opt/aws/bin/cfn-signal -e 0 -r \\\"LAMP Stack setup complete\\\" '\", { \"Ref\" : \"WaitHandle\" }, \"'\\n\"\n        ]]}}        \n      }\n    },\n\n    \"WaitHandle\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\n    },\n\n    \"WaitCondition\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitCondition\",\n      \"DependsOn\" : \"WebServer\",\n      \"Properties\" : {\n        \"Handle\" : {\"Ref\" : \"WaitHandle\"},\n        \"Timeout\" : \"300\"\n      }\n    },\n    \n        \"WebServerSecurityGroup\" : {\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\n          \"Properties\" : {\n            \"GroupDescription\" : \"Enable HTTP access via port 80\",\n            \"SecurityGroupIngress\" : [\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"80\", \"ToPort\" : \"80\", \"CidrIp\" : \"0.0.0.0/0\"},\n              {\"IpProtocol\" : \"tcp\", \"FromPort\" : \"22\", \"ToPort\" : \"22\", \"CidrIp\" : { \"Ref\" : \"SSHLocation\"}}\n            ]\n          }      \n        }          \n      },\n      \n      \"Outputs\" : {\n    \"WebsiteURL\" : {\n      \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}]] },\n      \"Description\" : \"URL for newly created LAMP stack\"\n    }\n  }\n}\n"
    @circular = "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \n  \"Description\" : \"AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack using a single EC2 instance and a local MySQL database for storage. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server, PHP and MySQL at instance launch time. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n  \n  \"Parameters\" : {\n      \n    \"KeyName\" : {\n      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[-_ a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"can contain only alphanumeric characters, spaces, dashes and underscores.\"\n    },    \n\n    \"DBName\": {\n      \"Default\": \"MyDatabase\",\n      \"Description\" : \"MySQL database name\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBUsername\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Username for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"16\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Password for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"DBRootPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Root password for MySQL\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"InstanceType\" : {\n      \"Description\" : \"WebServer EC2 instance type\",\n      \"Type\" : \"String\",\n      \"Default\" : \"m1.small\",\n      \"AllowedValues\" : [ \"t1.micro\",\"m1.small\",\"m1.medium\",\"m1.large\",\"m1.xlarge\",\"m2.xlarge\",\"m2.2xlarge\",\"m2.4xlarge\",\"m3.xlarge\",\"m3.2xlarge\",\"c1.medium\",\"c1.xlarge\",\"cc1.4xlarge\",\"cc2.8xlarge\",\"cg1.4xlarge\"],\n      \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\n    },\n    \"SSHLocation\" : {\n      \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"Default\": \"0.0.0.0/0\",\n      \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n      \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n    } \n  },\n    \n  \"Resources\" : {     \n      \n    \"WebServer\": {  \n      \"Type\": \"AWS::EC2::Instance\",\n      \"Properties\": {\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroups\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ]\n        }\n      },\n\n    \"WaitHandle\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\n    },\n\n    \"WaitCondition\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitCondition\",\n      \"DependsOn\" : \"WebServer\",\n      \"Properties\" : {\n        \"Handle\" : {\"Ref\" : \"WaitHandle\"},\n        \"Timeout\" : \"300\"\n      }\n    },\n    \n        \"WebServerSecurityGroup\" : {\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\n                    \"Properties\" : {\n            \"GroupDescription\" : \"Enable HTTP access via port 80\",\n            \"BadArg\" : {\"Ref\" : \"WebServer\"}\n          }      \n        }          \n      },\n      \n      \"Outputs\" : {\n    \"WebsiteURL\" : {\n      \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}]] },\n      \"Description\" : \"URL for newly created LAMP stack\"\n    }\n  }\n}\n"
    @bad_reference = "{\n  \"AWSTemplateFormatVersion\" : \"2010-09-09\",\n  \n  \"Description\" : \"AWS CloudFormation Sample Template LAMP_Single_Instance: Create a LAMP stack using a single EC2 instance and a local MySQL database for storage. This template demonstrates using the AWS CloudFormation bootstrap scripts to install the packages and files necessary to deploy the Apache web server, PHP and MySQL at instance launch time. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.\",\n  \n  \"Parameters\" : {\n      \n    \"KeyName\" : {\n      \"Description\" : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\" : \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[-_ a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"can contain only alphanumeric characters, spaces, dashes and underscores.\"\n    },    \n\n    \"DBName\": {\n      \"Default\": \"MyDatabase\",\n      \"Description\" : \"MySQL database name\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"64\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBUsername\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Username for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"16\",\n      \"AllowedPattern\" : \"[a-zA-Z][a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must begin with a letter and contain only alphanumeric characters.\"\n    },\n\n    \"DBPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Password for MySQL database access\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"DBRootPassword\": {\n      \"NoEcho\": \"true\",\n      \"Description\" : \"Root password for MySQL\",\n      \"Type\": \"String\",\n      \"MinLength\": \"1\",\n      \"MaxLength\": \"41\",\n      \"AllowedPattern\" : \"[a-zA-Z0-9]*\",\n      \"ConstraintDescription\" : \"must contain only alphanumeric characters.\"\n    },\n\n    \"InstanceType\" : {\n      \"Description\" : \"WebServer EC2 instance type\",\n      \"Type\" : \"String\",\n      \"Default\" : \"m1.small\",\n      \"AllowedValues\" : [ \"t1.micro\",\"m1.small\",\"m1.medium\",\"m1.large\",\"m1.xlarge\",\"m2.xlarge\",\"m2.2xlarge\",\"m2.4xlarge\",\"m3.xlarge\",\"m3.2xlarge\",\"c1.medium\",\"c1.xlarge\",\"cc1.4xlarge\",\"cc2.8xlarge\",\"cg1.4xlarge\"],\n      \"ConstraintDescription\" : \"must be a valid EC2 instance type.\"\n    },\n    \"SSHLocation\" : {\n      \"Description\" : \" The IP address range that can be used to SSH to the EC2 instances\",\n      \"Type\": \"String\",\n      \"MinLength\": \"9\",\n      \"MaxLength\": \"18\",\n      \"Default\": \"0.0.0.0/0\",\n      \"AllowedPattern\": \"(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})\\\\.(\\\\d{1,3})/(\\\\d{1,2})\",\n      \"ConstraintDescription\": \"must be a valid IP CIDR range of the form x.x.x.x/x.\"\n    } \n  },\n    \n  \"Resources\" : {     \n      \n    \"WebServer\": {  \n      \"Type\": \"AWS::EC2::Instance\",\n      \"Properties\": {\n        \"ImageId\" : { \"Fn::FindInMap\" : [ \"AWSRegionArch2AMI\", { \"Ref\" : \"AWS::Region\" },\n                          { \"Fn::FindInMap\" : [ \"AWSInstanceType2Arch\", { \"Ref\" : \"InstanceType\" }, \"Arch\" ] } ] },\n        \"InstanceType\"   : { \"Ref\" : \"InstanceType\" },\n        \"SecurityGroups\" : [ {\"Ref\" : \"WebServerSecurityGroup\"} ]\n        }\n      },\n\n    \"WaitHandle\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitConditionHandle\"\n    },\n\n    \"WaitCondition\" : {\n      \"Type\" : \"AWS::CloudFormation::WaitCondition\",\n      \"DependsOn\" : \"WebServer\",\n      \"Properties\" : {\n        \"Handle\" : {\"Ref\" : \"WaitHandle\"},\n        \"Timeout\" : \"300\"\n      }\n    },\n    \n        \"WebServerSecurityGroup\" : {\n          \"Type\" : \"AWS::EC2::SecurityGroup\",\n          \"DependsOn\" : \"BadWebServer\",\n          \"Properties\" : {\n            \"GroupDescription\" : \"Enable HTTP access via port 80\",\n            \"BadArg\" : {\"Ref\" : \"WebServer\"}\n          }      \n        }          \n      },\n      \n      \"Outputs\" : {\n    \"WebsiteURL\" : {\n      \"Value\" : { \"Fn::Join\" : [\"\", [\"http://\", { \"Fn::GetAtt\" : [ \"WebServer\", \"PublicDnsName\" ]}]] },\n      \"Description\" : \"URL for newly created LAMP stack\"\n    }\n  }\n}\n"
    @deps = {}
    @pdeps = {}
  end

  it "tests the correct dependency resolution" do
    test_stack = StackMate::Stacker.new(@stackstr,"TestStack",@resolved)
    test_stack.resolve_dependencies
    test_stack.tsort.should == ["WebServerSecurityGroup", "WaitHandle", "WebServer", "DbServer", "WaitCondition"]
  end

  it "tests circular dependency" do
    test_stack = StackMate::Stacker.new(@circular,"TestStack",@resolved)
    #test_stack.resolve_dependencies
    expect{test_stack.tsort}.to raise_error
  end

  it "tests bad reference" do
    expect{StackMate::Stacker.new(@bad_reference,"TestStack",@resolved)}.to raise_error
  end
end